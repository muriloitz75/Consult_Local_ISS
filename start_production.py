#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Inicializa√ß√£o para Produ√ß√£o

Este script prepara e inicia a aplica√ß√£o em modo de produ√ß√£o.
Ele verifica as configura√ß√µes necess√°rias e inicializa o banco de dados se necess√°rio.
"""

import os
import sys
import secrets
from pathlib import Path

def check_environment():
    """Verifica se o ambiente est√° configurado corretamente"""
    print("üîç Verificando configura√ß√µes do ambiente...")
    
    # Verifica se o arquivo .env existe
    if not os.path.exists('.env'):
        print("‚ùå Arquivo .env n√£o encontrado!")
        print("üìù Criando arquivo .env com configura√ß√µes padr√£o...")
        create_env_file()
    else:
        print("‚úÖ Arquivo .env encontrado")
    
    # Verifica se o diret√≥rio de logs existe
    if not os.path.exists('logs'):
        print("üìÅ Criando diret√≥rio de logs...")
        os.makedirs('logs')
    else:
        print("‚úÖ Diret√≥rio de logs existe")
    
    # Verifica se o banco de dados existe
    if not os.path.exists('instance/iss_database.db'):
        print("üóÑÔ∏è Banco de dados n√£o encontrado. Inicializando...")
        initialize_database()
    else:
        print("‚úÖ Banco de dados encontrado")
    
    print("‚úÖ Verifica√ß√£o do ambiente conclu√≠da!")

def create_env_file():
    """Cria um arquivo .env com configura√ß√µes seguras"""
    secret_key = secrets.token_hex(32)
    
    env_content = f"""# Configura√ß√µes de Produ√ß√£o
FLASK_CONFIG=production
FLASK_ENV=production
FLASK_DEBUG=False

# Chave secreta gerada automaticamente
SECRET_KEY={secret_key}

# Configura√ß√£o do Banco de Dados
# Para MySQL em produ√ß√£o, descomente e configure:
# DATABASE_URL=mysql+pymysql://usuario:senha@localhost/iss_database
# Para SQLite (padr√£o):
DATABASE_URL=sqlite:///instance/iss_database.db

# Configura√ß√µes de Seguran√ßa
SESSION_COOKIE_SECURE=True
SESSION_COOKIE_HTTPONLY=True
SESSION_COOKIE_SAMESITE=Lax

# Configura√ß√µes de Logging
LOG_LEVEL=INFO
LOG_FILE=logs/app.log

# Configura√ß√µes do Servidor
HOST=0.0.0.0
PORT=5000

# Configura√ß√µes de Performance
THREADS=4
WORKERS=2
"""
    
    with open('.env', 'w', encoding='utf-8') as f:
        f.write(env_content)
    
    print(f"‚úÖ Arquivo .env criado com SECRET_KEY segura")

def initialize_database():
    """Inicializa o banco de dados"""
    try:
        # Cria o diret√≥rio instance se n√£o existir
        os.makedirs('instance', exist_ok=True)
        
        # Executa o script de inicializa√ß√£o do banco
        if os.path.exists('init_db.py'):
            print("üîÑ Executando script de inicializa√ß√£o do banco...")
            os.system('python init_db.py')
            print("‚úÖ Banco de dados inicializado com sucesso")
        else:
            print("‚ö†Ô∏è Script init_db.py n√£o encontrado. Criando apenas as tabelas...")
            from app import create_app, db
            app = create_app('production')
            with app.app_context():
                db.create_all()
            print("‚úÖ Tabelas do banco criadas")
    
    except Exception as e:
        print(f"‚ùå Erro ao inicializar banco de dados: {e}")
        sys.exit(1)

def check_dependencies():
    """Verifica se as depend√™ncias est√£o instaladas"""
    print("üì¶ Verificando depend√™ncias...")
    
    try:
        import flask
        import flask_sqlalchemy
        import pymysql
        import cryptography
        print("‚úÖ Todas as depend√™ncias est√£o instaladas")
    except ImportError as e:
        print(f"‚ùå Depend√™ncia faltando: {e}")
        print("üí° Execute: pip install -r requirements.txt")
        sys.exit(1)

def start_production_server():
    """Inicia o servidor em modo de produ√ß√£o"""
    print("üöÄ Iniciando servidor em modo de produ√ß√£o...")
    print("üìã Configura√ß√µes:")
    print(f"   - Host: {os.getenv('HOST', '0.0.0.0')}")
    print(f"   - Porta: {os.getenv('PORT', '5000')}")
    print(f"   - Debug: {os.getenv('FLASK_DEBUG', 'False')}")
    print(f"   - Ambiente: {os.getenv('FLASK_ENV', 'production')}")
    print("")
    print("üí° Para produ√ß√£o real, considere usar Gunicorn:")
    print("   gunicorn --bind 0.0.0.0:5000 --workers 4 wsgi:application")
    print("")
    
    # Importa e executa a aplica√ß√£o
    from wsgi import application
    application.run(
        host=os.getenv('HOST', '0.0.0.0'),
        port=int(os.getenv('PORT', 5000)),
        debug=os.getenv('FLASK_DEBUG', 'False').lower() == 'true',
        threaded=True
    )

def main():
    """Fun√ß√£o principal"""
    print("üè≠ Inicializador de Produ√ß√£o - Busca Assertiva ISS")
    print("=" * 50)
    
    # Carrega vari√°veis de ambiente
    try:
        from dotenv import load_dotenv
        load_dotenv()
    except ImportError:
        print("‚ö†Ô∏è python-dotenv n√£o instalado. Vari√°veis de ambiente podem n√£o ser carregadas.")
    
    # Executa verifica√ß√µes
    check_dependencies()
    check_environment()
    
    print("\n" + "=" * 50)
    print("‚úÖ Ambiente preparado com sucesso!")
    print("=" * 50 + "\n")
    
    # Pergunta se deve iniciar o servidor
    response = input("üöÄ Deseja iniciar o servidor agora? (s/N): ").lower().strip()
    if response in ['s', 'sim', 'y', 'yes']:
        start_production_server()
    else:
        print("\nüìù Para iniciar manualmente:")
        print("   python wsgi.py")
        print("   ou")
        print("   gunicorn --bind 0.0.0.0:5000 --workers 4 wsgi:application")

if __name__ == '__main__':
    main()